All returns are whitespace-delimited.


If the server detects that a request is incomplete (an incomplete HTTP/1.0
request for GET requests, or a truncated request body that doesn't match the
Content-Length header for POST requests), the server will sleep for 30 seconds
before returning 'INCOMPLETE'.  The sleep allows clients to time out and retry
without having to deal with the error message (the server lets them treat
INCOMPLETE requests like server timeouts).  The server only performs this check
for requests that include a account_hmac.



Most calls can return 'DENIED' on failure

Some calls can return 'SHUTDOWN' when the server has been switched into
shutdown mode.  After this, subsequent calls to server may be unsafe in terms
of houses being lost, etc.  Client should stop immediately (and a client that
gets a SHUTDOWN response on startup should stop and tell user to try again
later).  Immediately following the SHUTDOWN response, a plain text message
from the server admin may be included.  Clients can display this message
to the user before shutting down.




=== Call:
server.php?action=check_required_version

Returns:
requiredVersionNumber
newVersionDownloadURL
OK



Where:
requiredVersionNumber is client version number compatible with this server
newVersionDownloadURL is url reminder for users to fetch latest version



=== Call:
server.php?action=check_user&email=[signup email address]
							&sequence_number=[number]
                            &account_hmac=[hmac-sha1, hex-encoded]

Returns:
userID
sequenceNumber
OK

Where:
sequence_number is a dummy sequence number that is not verified to be
as-of-yet unused (can be 0, for example).

account_zero_hmac is the HMAC (see below) computed on sequence_number.
This is not replay-proof, but it doesn't need to be, because it updates no
server state, and userID is not secret. It allows clients to verify their 
account key in one call.

userID = unique user ID number
sequenceNumber = sequence number for hmac-sha1 secure hashing of account keys
                 to sign future transactions.  Any transactions using
                 lower sequence numbers will be denied as stale replays. 


Note:
The idea here is that you pass in a dummy sequece_number just to check if 
your account key is correct, and if it is correct, then the true sequence
number (for your next, fully-validated api call) is returned.




== General Note:
To verify the identity of the user making each transaction, a hash of
that user's account key is included with the transaction call.
That hash is constructed in the following way:

  HMAC_SHA1( account_key, 
             sequence_number . hash_version_number )

Where the two inputs are the ASCII account key (in all caps, with
hyphens removed) and the ASCII, base-10 representation of the sequence number,
and finally concatonated with the ASCII, base-10 representation of the version
number.

Each transaction updates the sequence number associated with the user on
the server.  Each subsequent transaction must use a new sequence number to
thwart replay attacks.

Thus, the account key is never sent from the client to the server, yet the
server can verify that the client making the transaction is indeed in 
possession of the account key (which only one person in the world should have),
as well as the proper version number.





=== Call:
server.php?action=check_hmac&user_id=[id number]
                            &sequence_number=[number]
                            &account_hmac=[hmac-sha1, hex-encoded]
Returns:
OK














=== Call:
server.php?action=make_deposit
          &email=[email]
          &client_public_key=[32-byte key, hex-encoded]
          &email_hmac=[hmac-sha1, hex-encoded]
		  &card_data_encrypted=[encrypted card data, hex-encoded]
		  &dollar_amount=[ASCII decimal value]
          &dollar_amount_hmac=[hmac-sha1, hex-encoded]
       For existing accounts:
          &user_id=[id number]
          &sequence_number=[number]
          &account_hmac=[hmac-sha1, hex-encoded]  
		  
Returns:
new_account
encrypted_account_key
OK



Where:

client_public_key  is the client's 32-byte curve25519 public key,
hex-encoded as a 64-character string.

email_hmac is HMAC_SHA1( shared_secret_hex, email ), where shared_secret_hex is
derived through curve25519 key exchange (using the hard-coded 
server_public_key).

card_data_encrypted is the ASCII credit card data in the format
card_number#MM#YYYY#CVC
XOR'd with sufficient bytes from 
HMAC_SHA1( shared_secret_hex, 0 ) . HMAC_SHA1( shared_secret_hex, 1 )
(two HMACs concatonated to make 40 bytes), where shared_secret is derived
through curve25519 key exchange (using the hard-coded server_public_key).
MM and YYYY are the 2- and 4-digit card epiration month and year.
For a 16-digit card number and a 3-digit CVC, the first 28 bytes of the 
40-byte HMAC concatonation are used.

dollar_amount is the ASCII decimal dollar and cents value, with two figures
to the right of the decimal point, like 543.21 or 23.00

dollar_amount_hmac is HMAC_SHA1( shared_secret_hex, dollar_amount ), where 
shared_secret_hex is derived through curve25519 key exchange (using the 
hard-coded server_public_key).

The server can verify this descrypted card data format to thwart
man-in-the-middle attacks from capturing the server response (verifying that 
the client_public_key has not been tampered with---that the person who supplied
a valid, chargeable card number also supplied client_public_key, so it's
safe to send new account details back encrypted against this key).


NOTE:
shared_secret_hex, as referenced above, is always UPPERCASE when being
used as a key string for HMAC_SHA1.



Returns DENIED on payment failure.
Returns ACCOUNT_EXISTS if no existing account details were provided and
an account already exists for this email address.


new_account is 1 if no deposit has ever been made for this email address
before.  In this case, an encrypted_account_key is returned for the new
account.  No key is returned if the deposit is made into an existing account
(the string # is returned in that spot instead).

encrypted_account_key is the ASCII representation of the account key, with
hyphens removed, XOR'd with sufficient bytes from 
HMAC_SHA1( shared_secret_hex, 2 ) . HMAC_SHA1( shared_secret_hex, 3 )
(two HMACs concatonated to make 40 bytes), where shared_secret is derived
through curve25519 key exchange.
The result is hex encoded.


Deposits into existing accounts MUST include user_id, sequence_number, and
account_hmac.


NOTE:
The only way for someone to obtain their account number directly from the
server is to make an initial deposit for an email address.
A receipt will be emailed to them with their account_key for future reference.

Subsequent deposits must be made using that account key (to generate valid
account_hmacs) and will not return the account_key again.


WEAKNESSES:

An attacker with a valid credit card number can pre-hijack an email address
by making a new account for it and depositing money into it.  The attacker
will then have the account_key for this email address.  However, the email
address owner will receive a receipt by email alerting them that this has
happened.

A man-in-the-middle attack can replace the email address for new account
creation, but only by also replacing the client_public_key, and therefore also
replacing card data with some other, valid card data.  Thus, the attacker
can make deposites into a different, newly-created account, but only by
using the attacker's own card (and not redirecting the target's funds
into a different account).

For existing accounts, an even stronger property holds.


